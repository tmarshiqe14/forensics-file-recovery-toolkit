#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <cs50.h>
#include <openssl/sha.h>  // for SHA-256

#define BLOCK_SIZE 512

// Supported file types
typedef struct {
    char name[10];
    uint8_t header[8];
    int header_size;
} FileType;

FileType types[] = {
    {"jpg", {0xff, 0xd8, 0xff}, 3},
    {"png", {0x89, 0x50, 0x4E, 0x47}, 4},
    {"pdf", {0x25, 0x50, 0x44, 0x46}, 4},
    {"zip", {0x50, 0x4B, 0x03, 0x04}, 4}
};
int num_types = sizeof(types)/sizeof(FileType);

// Function to compute SHA-256 hash
void compute_sha256(FILE *file, unsigned char output[SHA256_DIGEST_LENGTH]) {
    fseek(file, 0, SEEK_SET);
    SHA256_CTX sha256;
    SHA256_Init(&sha256);

    uint8_t buf[BLOCK_SIZE];
    size_t bytes;
    while((bytes = fread(buf, 1, BLOCK_SIZE, file)) != 0) {
        SHA256_Update(&sha256, buf, bytes);
    }

    SHA256_Final(output, &sha256);
    fseek(file, 0, SEEK_SET);  // Reset file pointer
}

// Check if block matches a file type header
int match_header(uint8_t *buffer) {
    for (int i = 0; i < num_types; i++) {
        int match = 1;
        for (int j = 0; j < types[i].header_size; j++) {
            if (buffer[j] != types[i].header[j]) {
                match = 0;
                break;
            }
        }
        if (match) return i;  // Return index of matched file type
    }
    return -1;
}

int main(int argc, char *argv[])
{
    if(argc != 2) {
        printf("Usage: ./recover FILE\n");
        return 1;
    }

    FILE *card = fopen(argv[1], "r");
    if(card == NULL) {
        printf("Could not open file\n");
        return 1;
    }

    uint8_t buffer[BLOCK_SIZE];
    FILE *img = NULL;
    int count_file = 0;
    char filename[20];
    bool file_open = false;
    int current_type = -1;

    // Open log file
    FILE *log = fopen("recovery_log.txt", "w");
    if(log == NULL) {
        printf("Could not open log file\n");
        fclose(card);
        return 1;
    }

    while(fread(buffer, 1, BLOCK_SIZE, card) == BLOCK_SIZE) {
        int type_index = match_header(buffer);

        if(type_index != -1) { // New file detected
            if(file_open) fclose(img);  // Close previous file

            current_type = type_index;
            sprintf(filename, "%03i.%s", count_file, types[type_index].name);
            img = fopen(filename, "w");
            if(img == NULL) {
                printf("Could not create file %s\n", filename);
                fclose(card);
                fclose(log);
                return 1;
            }
            file_open = true;
            count_file++;
        }

        // Write block if a file is currently open
        if(file_open) {
            fwrite(buffer, 1, BLOCK_SIZE, img);
        }
    }

    // Compute SHA-256 hashes for all recovered files
    if(file_open) fclose(img);
    for(int i = 0; i < count_file; i++) {
        sprintf(filename, "%03i.%s", i, types[current_type].name);
        FILE *f = fopen(filename, "r");
        if(f) {
            unsigned char hash[SHA256_DIGEST_LENGTH];
            compute_sha256(f, hash);
            fprintf(log, "File: %s  SHA-256: ", filename);
            for(int j=0;j<SHA256_DIGEST_LENGTH;j++) fprintf(log,"%02x", hash[j]);
            fprintf(log,"\n");
            fclose(f);
        }
    }

    fclose(log);
    fclose(card);

    printf("Recovery complete. %i files recovered. See recovery_log.txt for hashes.\n", count_file);
    return 0;
}
